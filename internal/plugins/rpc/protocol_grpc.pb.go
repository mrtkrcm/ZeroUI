// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/plugins/rpc/protocol.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigPlugin_GetInfo_FullMethodName         = "/rpc.ConfigPlugin/GetInfo"
	ConfigPlugin_DetectConfig_FullMethodName    = "/rpc.ConfigPlugin/DetectConfig"
	ConfigPlugin_ParseConfig_FullMethodName     = "/rpc.ConfigPlugin/ParseConfig"
	ConfigPlugin_WriteConfig_FullMethodName     = "/rpc.ConfigPlugin/WriteConfig"
	ConfigPlugin_ValidateField_FullMethodName   = "/rpc.ConfigPlugin/ValidateField"
	ConfigPlugin_ValidateConfig_FullMethodName  = "/rpc.ConfigPlugin/ValidateConfig"
	ConfigPlugin_GetSchema_FullMethodName       = "/rpc.ConfigPlugin/GetSchema"
	ConfigPlugin_SupportsFeature_FullMethodName = "/rpc.ConfigPlugin/SupportsFeature"
)

// ConfigPluginClient is the client API for ConfigPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConfigPlugin service definition
type ConfigPluginClient interface {
	// GetInfo returns plugin metadata and capabilities
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// DetectConfig attempts to discover configuration files
	DetectConfig(ctx context.Context, in *DetectConfigRequest, opts ...grpc.CallOption) (*DetectConfigResponse, error)
	// ParseConfig reads and parses a configuration file
	ParseConfig(ctx context.Context, in *ParseConfigRequest, opts ...grpc.CallOption) (*ParseConfigResponse, error)
	// WriteConfig writes configuration data to a file
	WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error)
	// ValidateField validates a single field value
	ValidateField(ctx context.Context, in *ValidateFieldRequest, opts ...grpc.CallOption) (*ValidateFieldResponse, error)
	// ValidateConfig validates entire configuration
	ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error)
	// GetSchema returns the current configuration schema
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// SupportsFeature checks if plugin supports a specific feature
	SupportsFeature(ctx context.Context, in *SupportsFeatureRequest, opts ...grpc.CallOption) (*SupportsFeatureResponse, error)
}

type configPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigPluginClient(cc grpc.ClientConnInterface) ConfigPluginClient {
	return &configPluginClient{cc}
}

func (c *configPluginClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) DetectConfig(ctx context.Context, in *DetectConfigRequest, opts ...grpc.CallOption) (*DetectConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectConfigResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_DetectConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) ParseConfig(ctx context.Context, in *ParseConfigRequest, opts ...grpc.CallOption) (*ParseConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseConfigResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_ParseConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteConfigResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_WriteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) ValidateField(ctx context.Context, in *ValidateFieldRequest, opts ...grpc.CallOption) (*ValidateFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateFieldResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_ValidateField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateConfigResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_ValidateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configPluginClient) SupportsFeature(ctx context.Context, in *SupportsFeatureRequest, opts ...grpc.CallOption) (*SupportsFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportsFeatureResponse)
	err := c.cc.Invoke(ctx, ConfigPlugin_SupportsFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigPluginServer is the server API for ConfigPlugin service.
// All implementations must embed UnimplementedConfigPluginServer
// for forward compatibility.
//
// ConfigPlugin service definition
type ConfigPluginServer interface {
	// GetInfo returns plugin metadata and capabilities
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// DetectConfig attempts to discover configuration files
	DetectConfig(context.Context, *DetectConfigRequest) (*DetectConfigResponse, error)
	// ParseConfig reads and parses a configuration file
	ParseConfig(context.Context, *ParseConfigRequest) (*ParseConfigResponse, error)
	// WriteConfig writes configuration data to a file
	WriteConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error)
	// ValidateField validates a single field value
	ValidateField(context.Context, *ValidateFieldRequest) (*ValidateFieldResponse, error)
	// ValidateConfig validates entire configuration
	ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error)
	// GetSchema returns the current configuration schema
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	// SupportsFeature checks if plugin supports a specific feature
	SupportsFeature(context.Context, *SupportsFeatureRequest) (*SupportsFeatureResponse, error)
	mustEmbedUnimplementedConfigPluginServer()
}

// UnimplementedConfigPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigPluginServer struct{}

func (UnimplementedConfigPluginServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedConfigPluginServer) DetectConfig(context.Context, *DetectConfigRequest) (*DetectConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectConfig not implemented")
}
func (UnimplementedConfigPluginServer) ParseConfig(context.Context, *ParseConfigRequest) (*ParseConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseConfig not implemented")
}
func (UnimplementedConfigPluginServer) WriteConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteConfig not implemented")
}
func (UnimplementedConfigPluginServer) ValidateField(context.Context, *ValidateFieldRequest) (*ValidateFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateField not implemented")
}
func (UnimplementedConfigPluginServer) ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedConfigPluginServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedConfigPluginServer) SupportsFeature(context.Context, *SupportsFeatureRequest) (*SupportsFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportsFeature not implemented")
}
func (UnimplementedConfigPluginServer) mustEmbedUnimplementedConfigPluginServer() {}
func (UnimplementedConfigPluginServer) testEmbeddedByValue()                      {}

// UnsafeConfigPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigPluginServer will
// result in compilation errors.
type UnsafeConfigPluginServer interface {
	mustEmbedUnimplementedConfigPluginServer()
}

func RegisterConfigPluginServer(s grpc.ServiceRegistrar, srv ConfigPluginServer) {
	// If the following call pancis, it indicates UnimplementedConfigPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigPlugin_ServiceDesc, srv)
}

func _ConfigPlugin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_DetectConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).DetectConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_DetectConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).DetectConfig(ctx, req.(*DetectConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_ParseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).ParseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_ParseConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).ParseConfig(ctx, req.(*ParseConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_WriteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).WriteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_WriteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).WriteConfig(ctx, req.(*WriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_ValidateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).ValidateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_ValidateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).ValidateField(ctx, req.(*ValidateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_ValidateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).ValidateConfig(ctx, req.(*ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigPlugin_SupportsFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportsFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigPluginServer).SupportsFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigPlugin_SupportsFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigPluginServer).SupportsFeature(ctx, req.(*SupportsFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigPlugin_ServiceDesc is the grpc.ServiceDesc for ConfigPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ConfigPlugin",
	HandlerType: (*ConfigPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ConfigPlugin_GetInfo_Handler,
		},
		{
			MethodName: "DetectConfig",
			Handler:    _ConfigPlugin_DetectConfig_Handler,
		},
		{
			MethodName: "ParseConfig",
			Handler:    _ConfigPlugin_ParseConfig_Handler,
		},
		{
			MethodName: "WriteConfig",
			Handler:    _ConfigPlugin_WriteConfig_Handler,
		},
		{
			MethodName: "ValidateField",
			Handler:    _ConfigPlugin_ValidateField_Handler,
		},
		{
			MethodName: "ValidateConfig",
			Handler:    _ConfigPlugin_ValidateConfig_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _ConfigPlugin_GetSchema_Handler,
		},
		{
			MethodName: "SupportsFeature",
			Handler:    _ConfigPlugin_SupportsFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/plugins/rpc/protocol.proto",
}
